OO principles:
Abstraction: In object oriented design, abstraction mechanism is meant to hide implementation details from client. All client needs to know is that
what all operations can be performed on an object. How they are performed internally is of no concern to client. Inner complexities of working are
hidden away, and client only needs to interact with objects via its interface(set of operations which can be requested to an object).

Encapsulation: An object is a combination of data and operations which can be performed on that data. In object oriented system, objects' state changes
by invocation of operations on their data and with state change system progresses ahead to finally achieve its goal. But merely state change is not
important. It is also very critical that state change is functionally correct. Hence it is needed that agents from outside of the object are not
able to change its state directly.Instead they can do it only via object's interface. This approach enables us to run validation/functional rules to ensure
that change in state is valid. Hence access to internal details of an object is restricted. This is called encapsulation.

Polymorphism: In object oriented system, multiple objects can have same interface. So when an operation is invoked via an interface, then which object
that request would be mapped to is determined during run time. This run-time association of request to an object and one of its operation is called
dynamic binding.Dynamic binding means that invoking an operation doesn't commit us to a particular object(ie implementation) until run-time.
Hence, we can write programs that expect an object with a particular interface, knowing that any object that has the correct interface will accept
the request. Moreover, dynamic binding allows us to substitute objects that have identical interfaces for each other at run-time. This substitutability
is known as polymorphism, and it's a key concept in object-oriented systems. It lets a client object make few assumptions about other objects beyond
supporting a particular interface.
Polymorphism:
-simplifies the definitions of clients
-decouples objects from each other
-and lets them vary their relationships to each other at run-time

Inheritance:




Abstract class should contain only those behaviours which are common to child classes. Else, we may end up providing dummy implementations
for such behaviours in classes which don't really need that behaviour. This is a big maintainability cost.
Another problem with abstract class is that their behaviour is strongly coupled with their child classes, and hence difficult to replace in run time
which costs system in terms of flexibility.
Also, we can't add abstract class behaviour to an already existing class which already extends a super class.

Can we resort to Interface based inheritance in such cases, making only those child classes implement Interface which need that behaviour?
This would reduce code reuse, and we would need to make changes at all places where that behaviour is implemented and hence a different type
of maintenance problem.

So inheritance doesn't help much when software requirements keep changing.

Design principle:
Those aspects of code which keep changing with requirements must be separated out from unvarying parts and encapsulate them, and then alter
or extend them separately without affecting  unchanging parts.
This principle forms basis of all design patterns. Every design pattern provides a way to let some part of the system vary independently
from all other parts.

Those varying behaviours once encapsulated, can then be assigned to those classes which need that behaviour. Moreover, it would be much better
if we can replace the behaviours dynamically so that a class is not bound to a single implementation of behaviour. This brings lots of flexibility
to the system. This brings us to another design principle.

Design principle:
Program to an interface, not an implementation.
It means we represent a behaviour with an interface/abstract class and then make multiple implementations of that interface/abstract class for specific cases.
This decouples system from specific implementations and behaviour can be replaced dynamically.
Point is to exploit polymorphism by programming to a supertype so that actual runtime object is not locked into the code.
So declared type of variables should be a supertype, like interface or abstract class, so that objects assigned to those variables can be of
any concrete implementation of the supertype, which means client code using them doesn't need to know about actual object types.
So, prefer
Automobile a = new Car();
over
Car c = new Car();
Even better would be not to hardcode the instantiation of subtype into the code, rather assign concrete implementation at run time:
Automobile a = getAutomobile();

We don't need to know what actual automobile subtype is, we just know that we can invoke automobile behaviour on it.
There are two benefits to manipulating objects solely in terms of the interface defined by abstract classes(or interfaces ins some languages like):
1. Clients remain unaware of the specific types of objects they use, as long as the objects adhere to the interface that clients expect.
2. Clients remain unaware of the classes that implement these objects. Clients only know about the abstract class(es) defining the interface.

HAS-A over IS-A(inheritance vs composition)
Inheritance causes IS-A relationship between supertype and subtype. Drawback of this relationship is:
-parent's behaviour is rigidly locked into the child and behaviour can't be changed at runtime
-it breaks encapsulation as parent class's inner details are exposed to child class
-if parent class implementation changes, child class are also affected, sign of string coupling
-if inherited implementation is not found appropriate to meet new requirements, we may need to modify parent class or replace it with another class,
which limits flexibility and reusability.
Once cure can be to inherit only from abstract classes as they have no or very little implementation.

Composition(an object having reference to another object) causes HAS-A relationship and gives high level of flexibility as object being composed
with can be replaced at run time as long as that object is implementing correct behaviour interface. ALos, there is no question of breaking encapsulation
as objects interact via interfaces only. If an object's inner implementation changes, client object is not at all impacted as long as interface is intact.
Design principle:
Favour object composition over inheritance

Composition is used by most of the design patterns.

Strategy pattern:
Define a family of algorithms/behaviours, encapsulate them and use them interchangeably. This lets algorithms vary independently from clients
that use it.

Design patterns enable us to structure our application in ways that are easier to understand, maintain, reuse and flexible.
It also helps to restructure old code if it has degraded into a messy codebase.

Design principle:
Strive for loosely coupled designs between objects that interact.
Loosely coupled designs allow us to build flexible object oriented systems that can handle the change because they minimize the interdependency
between the objects.
Oberver pattern:
Observer pattern is a one-to-many relationship between an object(observable) and its dependent objects(observers) such that if object changes
its dependent objects are notified about the change.
This provides an object design in which objects are loosely coupled. They can interact with each other but know very little about each other,
and hence one may change without affecting other.


Design principle:
Classes should be closed for modification, but open for extension.
Our goal should be to allows classes to be easily extended to incorporate new behaviour without modifying existing code. This make our design resilient
and flexible to take new functionality.
We shouldn't try to apply this principle in every part of code as it may be unnecessary, wasteful and may lead to complex code.
We should try to find those areas of design which are more likely to change, and extend them.
Decorator pattern:
Enables us to add additional behaviour to an object dynamically. It provides a much more flexible way of extending behaviour than subclassing.
When we extend a class, subclass inherits features/responsibilities from it. As a result all the objects of subclass have those aspects. This is desired
many times, but sometimes we want some features/responsibilities to be possessed by some individual objects only,rather than every single object of the
class. We want to have control over what features a particular object should have and when. Subclassing doesn't give that flexibility.
Decorator pattern helps in achieving this. Target object which we want to have a specific feature is wrapped inside another object having that feature.
Enclosing object is called decorator, and importantly it has same interface as target object so that client code can invoke same interface. When client
sends a request, decorator object forwards that request to target object and additionally add its own action(decoration) before or after it. Multiple
decorators can be applied recursively, hence allowing to add as many features as we want.
We define the interface of the target object/class. And we define an abstract Decorator class which implements this interface, so now it has
same interface as target object and client can invoke calls on it transparently.This abstract class also contains the reference to target object.
We implement concrete classes for Decorator,wherein we direct client requests to target object.And while it does so,it also performs the 'decoration'.
/////
Four constituents of design pattern:
1. Name
2. Problem
3. Solution
3. Consequences and trade-offs

Classification of design patterns:
- Purpose: Creational,Structural,Behavioural
- Scope: Class,Object

Implementation inheritance(Class) vs Interface inheritance: Purpose of Implementation inheritance is code sharing/reusability and extensibility,
while Interface inheritance is meant to make sure that objects can be substituted with each other at run time.

Program to an interface, not an implementation.This greatly reduces implementation dependencies between subsystems.
Creational patterns abstract the process of object creation.These patterns give you different ways to associate an interface with its implementation
transparently at instantiation. Creational patterns ensure that your system is written in terms of interfaces, not implementations.

Inheritance versus Composition: Composition allows behaviours to be composed at run-time as compositions can be done with Interfaces.
With inheritance subclass is bound to parent class's implementation.
Favor object composition over class inheritance.

Creational patterns: Creational design patterns abstract the instantiation process. They enable a software system to be independent of how
its objects are created,composed and represented.A class creational pattern uses inheritance to vary the class that's instantiated,
whereas an object creational pattern will delegate instantiation to another object.
There are two recurring themes in these patterns. First, they all encapsulate knowledge about which concrete classes the system uses.
Second, they hide how instances of these classes are created and put together.

a. Abstract factory pattern: It is a creational pattern which provides an interface for creating families of related or dependent objects without
specifying their concrete classes. Suppose a class depends on several related/dependent objects. One can put code for creating these objects within
the class.
But this approach makes the system inflexible as in future different types of objects may be needed and this would need huge change in class.
With abstract factory, we provide an interface to create the objects. We then can have concrete implementation of this interface which creates
specific type of concrete objects and return abstract/interface type.So client doesn't know which concrete type is created.
When new type of objects is needed, we implement abstract factory interface, and client needs to make a small change and switch to new
implementation.

b. Builder pattern: It is a creational pattern which separates construction of a complex object from its representation.
As a result, same construction process can be used to create different representations.

c. Factory method pattern: It is a creational pattern which provides an interface to create an object, but let subclasses decide which object
to create.

d. Prototype pattern:

e. Singleton pattern: It is a creational pattern and ensures that a class has only one instance, and provides a global point of access to it.

Structural patterns: Structural patterns are concerned with how classes and objects are composed to form larger structures.
Structural class patterns make use of inheritance to compose interfaces/implementations.Structural object patterns describe ways to compose objects
to create new functionality.

a. Adapter pattern: It is a structural pattern which converts interface of a class into another interface that client expects,thus enabling
classes to work with each other which couldn't otherwise due to incompatible interfaces.
Adapter pattern can either make use of inheritance(class scope) or composition(object scope).

b. Bridge pattern: If we have an abstract class which can have several implementations, we use inheritance. Abstract class defines an interface,
and concrete subclasses implements that interface. This creates strong coupling between abstraction and implementation, and hence they can't
evolve independently.
Bridge pattern handles this issue. In this pattern, abstractions and their implementations are placed in different class hierarchies. An interface
is used which acts as a connector/bridge between between these 2 hierarchies. Abstract class contains reference to this bridge interface.

c. Composite design pattern: This design pattern makes it possible for client code to treat a whole tree of parent-child objects as same object.
In a context where objects are arranged in a tree structure with a composite object having leaf objects as well as other composite objects, and
all such objects expected to have same behaviour from client point of view, this pattern makes it possible for client to treat all in same manner.
For eg.,in a drawing application, we may have individual objects like Line,Rectangle,Triangle,Circle etc and composite objects like Picture which
contains individual objects OR other composite objects. Client code needs 'draw' behaviour for all these objects, individual as well as composite.
So we define 'draw' interface, and this constitutes 'Component' interface. We make individual objects,'Leaf', implement this interface.
'Composite' object also implements 'Component' interface, as well as a general interface fro adding/removing leaf/composite objects.
Client code just needs to call 'draw' on top composite object, and call in delegated to all the objects in tree.

d. Decorator design pattern: When we extend a class, subclass inherits features/responsibilities from it. As a result all the objects of subclass
have those aspects. This is desired many times, but sometimes we want some features/responsibilities to be possessed by some individual objects only,
rather than every single object of the class. Decorator pattern helps in achieving this. From client's perspective, it still calls same interface
implemented by the target object.
We define the interface of the target object/class. And we define an abstract Decorator class which implements this interface, so now it has
same interface as target object and client can invoke calls on it transparently.This abstract class also contains the reference to target object.
We implement concrete classes for Decorator,wherin we direct client requests to target object.And while it does so,it also performs the 'decoration'.

e. Facade dssign pattern: Its very common to have complex software systems which consist of large number of smaller parts.These small parts/components
work behind their own interfaces which external systems can use. So if needed, external systems interact individually with these parts. It certainly
helps in customization. But it also means a large number of interfaces/parts to work with. So if an external system merely needs to use system as a whole
and customization is not its main aim, then this complexity of too many parts to deal with is an overkill.
Facade pattern help sin salvaging the situation. We basically provide a single,simplified interface called Facade which external systems can use
to deal with system as a whole. They dont need to interact with individual parts of the system.

f. Flyweight pattern: This pattern makes it possible to share common data among various objects, and hence helps in handling memory related issues.
Such objects have some data in common which dont for different contexts, called Intrinsic data. Data which varies is called Extrinsic data.
For every piece of intrinsic data we have an instance, hence if same intrinsic data is needed in different contexts we make use of very same object.
This reduces number of objects. Extrinsic data is to be supplied by the client base don context object is used from. Intrinsic data is kept immutable.
For eg., in an editor application same character is drawn at many positions. So character is intrinsic data while position is extrinsic. So for every
alphabet we have an object, and client provides position at which character has to be drawn. Object are called flyweight objects, and are created by
a factory which maintains a map between a key and the instance.

g. Proxy design pattern: This structural pattern is required in scenarios when some entities in the program needs to be have controlled access.
This can be something like a heavy object like an image, or network connection etc. We want that clients are not able to access it in a direct manner.
So we introduce a substitute for it,called proxy. Client interacts with proxy, which in turn delegates calls to main object,called as Subject.
For this to achieve, proxy and Subject implement same interface, also called as Subject.Proxy object then can add its own conditional logic
to control access to subject.

Strategy pattern: Encapsulating algorithm in an object is the intent of Strategy pattern.